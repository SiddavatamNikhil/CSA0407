#include <stdio.h>
#include <stdlib.h>

void sort(int arr[], int n) {
    int i, j, temp;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

int main() {
    int queue[100], n, head, i, j, seek = 0, max, direction;
    int left[100], right[100], l = 0, r = 0;
    
    printf("Enter the number of disk requests: ");
    scanf("%d", &n);
    
    printf("Enter the disk request sequence: ");
    for (i = 0; i < n; i++) {
        scanf("%d", &queue[i]);
    }
    
    printf("Enter the initial head position: ");
    scanf("%d", &head);
    
    printf("Enter the maximum disk size: ");
    scanf("%d", &max);
    
    printf("Enter head movement direction (1 for high, 0 for low): ");
    scanf("%d", &direction);
    
   
    for (i = 0; i < n; i++) {
        if (queue[i] < head)
            left[l++] = queue[i];
        else
            right[r++] = queue[i];
    }
    
    
    left[l++] = 0;
    right[r++] = max - 1;
    
    
    sort(left, l);
    sort(right, r);
    
    printf("\nSeek Sequence is:\n");
    
    if (direction == 1) { 
        for (i = 0; i < r; i++) {
            seek += abs(head - right[i]);
            head = right[i];
            printf("%d -> ", head);
        }
        for (i = l - 1; i >= 0; i--) {
            seek += abs(head - left[i]);
            head = left[i];
            if (i == 0) printf("%d", head);
            else printf("%d -> ", head);
        }
    } else { 
        for (i = l - 1; i >= 0; i--) {
            seek += abs(head - left[i]);
            head = left[i];
            printf("%d -> ", head);
        }
        for (i = 0; i < r; i++) {
            seek += abs(head - right[i]);
            head = right[i];
            if (i == r - 1) printf("%d", head);
            else printf("%d -> ", head);
        }
    }
    
    printf("\nTotal Seek Time = %d\n", seek);
    printf("Average Seek Time = %.2f\n", (float)seek / n);
    
    return 0;
}
