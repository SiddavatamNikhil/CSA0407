
#include <stdio.h>

int predict(int pages[], int frame[], int n, int index, int capacity) {
    int res = -1, farthest = index;
    for (int i = 0; i < capacity; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
        
        if (j == n)
            return i;
    }
    return (res == -1) ? 0 : res;
}

void optimalPage(int pages[], int n, int capacity) {
    int frame[capacity];
    int count = 0, page_faults = 0;

    for (int i = 0; i < capacity; i++)
        frame[i] = -1; 

    for (int i = 0; i < n; i++) {
        int found = 0;
        
        for (int j = 0; j < count; j++) {
            if (frame[j] == pages[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            if (count < capacity) {
                frame[count++] = pages[i];
            } else {
                int pos = predict(pages, frame, n, i + 1, capacity);
                frame[pos] = pages[i];
            }
            page_faults++;
        }

        printf("Step %2d: ", i + 1);
        for (int j = 0; j < capacity; j++) {
            if (frame[j] != -1)
                printf("%d ", frame[j]);
            else
                printf("- ");
        }
        printf("\n");
    }

    printf("\nTotal Page Faults = %d\n", page_faults);
}

int main() {
    int n, capacity;
    
    printf("Enter number of pages: ");
    scanf("%d", &n);
    
    int pages[n];
    printf("Enter the reference string: ");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);
    
    printf("Enter number of frames: ");
    scanf("%d", &capacity);
    
    optimalPage(pages, n, capacity);
    
    return 0;
}

