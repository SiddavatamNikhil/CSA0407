#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define N 5  
pthread_mutex_t chopstick[N];  

void* philosopher(void* num) {
    int id = *(int*)num;
    int left = id;                 
    int right = (id + 1) % N;      

    for (int i = 0; i < 3; i++) {  
        printf("Philosopher %d is thinking...\n", id);
        sleep(1);

        if (id % 2 == 0) {
            pthread_mutex_lock(&chopstick[left]);
            pthread_mutex_lock(&chopstick[right]);
        } else {
            pthread_mutex_lock(&chopstick[right]);
            pthread_mutex_lock(&chopstick[left]);
        }

        
        printf("Philosopher %d is eating (meal %d).\n", id, i + 1);
        sleep(2);

        
        pthread_mutex_unlock(&chopstick[left]);
        pthread_mutex_unlock(&chopstick[right]);

        printf("Philosopher %d finished eating (meal %d).\n", id, i + 1);
    }

    return NULL;
}

int main() {
    pthread_t philo[N];
    int ids[N];

    for (int i = 0; i < N; i++) {
        pthread_mutex_init(&chopstick[i], NULL);
    }

    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philo[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < N; i++) {
        pthread_join(philo[i], NULL);
    }

    for (int i = 0; i < N; i++) {
        pthread_mutex_destroy(&chopstick[i]);
    }

    printf("\nAll philosophers have finished dining.\n");
    return 0;
}


